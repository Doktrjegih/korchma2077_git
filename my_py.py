# Ну чо, пацаны, Питон?
print('Ты пидор')
print()  # Пустая строка
print('----------------Python Fundamentals----------------')
print('3 + 5 =', 3 + 5)  # Можешь считать, аки на калькуляторе
print('2 ^ 10 =', 2 ** 10)  # Степени - через две звездочки
print('5 % 2 =', 5 % 2)  # Процент дает ОСТАТОК от деления (remainder)
print()
a = 100500  # Переменные задаются как нехуй делать
print('a =', a)
b = 50250
print('a / b =', a / b)  # Ну и считаются, естессна
print('integer - целые числа')
print('float - с точкой')
c = 5
print('c = 5', type(c))  # Так можно вернуть тип переменной
print('7.5', type(7.5))  # Можно так
print('Хуй', type('Хуй'))  # И даже так
print('True/False', type(True))  # o_O
print()
print('2 + 2.0 =', 2 + 2.0, '(float)')
print('10 / 5 =', 10 / 5, '(float)')
d = 'Ты '
e = 'пидор'
print(d + e)  # Строки тоже можно складывать
print('Число Егора = ' + str(17.88854381999831))  # И конвертить числа, чтобы складывать с int или float
print(int('1337') + 8663)  # И наоборот
f = 'Ты пидор '
print(f * 3)  # Умножаются строки вот так
print()
print('----------------Python Lists----------------')
print([1, 2, 3, 4], 'ето лист')
g = ['3', 8, 9.8]
h = ['pizdec nahoi blyat\'', g]  # Лист внутри листа - изи
print(h)
print(g, 'g[0] =', g[0])  # Индексы - это пиздец
print(g, 'g[-1] =', g[-1])  # Отрицательные индексы - двойной пиздец
print(g, 'g[0] =', type(g[0]), 'хм, работает')
i = [4, 8, 15, 16, 23, 42]
print(i, 'i[0:4] =', i[0:4])  # slicing - выборка из листа, где start - inclusive; end - exclusive
print(i, 'i[:3] =', i[:3])  # от нулевого до end (remember, it's exclusive)
print(i, 'i[2:] =', i[2:])  # от start до конца (start - inclusive)
print(i, 'i[-4:5] =', i[-4:5])  # читаешь все равно слева направо
print(i, 'i[0:12] =', i[0:12])  # а вот это занятно: я был уверен, что получу ошибку
print()
j = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(j[1][2])  # Получаем элемент с индексом 2 из сублиста с индексом 1
print(j[0][0] + j[2][2])  # Операции с элементами - легко!
print(j[2][0:-1])  # Обращаемся к листу внутри листа
k = [15, 18, [3, 5, 7], 9, 6]
print('k =', k, '-->', k[2][1:][1])  # Сначала берем элемент 2, и делаем из него поочередную выборку
print(k[2][:])  # Все элементы активного листа
print()
l = k[3:]  # Можно делать листы, пиздя куски у других листов
print(l)
print(k[2] + l)  # Новые эл-ты добавляются в конец листа
del(k[1:])  # Отрезали нахуй всё
print()
print(k)
m = 10
n = m  # ПРИСВАИВАНИЕ
m = 20
print('m =', m, '- Новое значение')
print('n =', n, '- Сохраняет первое значение')
o = [7, 7, 7]
p = o  # РАВЕНСТВО
o[1] = 4
print('o =', o, '- Новое значение')
print('p =', p, '- Тянет новое значение "o"')
q = [0, 100, 10000]
r = q[:]  # КОПИРОВАНИЕ (если быть точным, создание отдельного листа, но такого же)
q[1] = 975
print('r =', r, '- "r" сохраняет первое значение')
print()
print('----------------Functions and Packages----------------')
# help(max) и ?max - различная инфа по функциям и операторам
print(max(5, 30, 15))  # max возвращает максимальное значение в скобках
print(min(10, 9, 8, 3))  # ну тут всё понятно
s = max([13, 17, 19])
print(s)  # Функции можно записывать в переменные
t = round(6.8476, 3)  # Округление до указанного знака (3) после точки
print(t)
# Теория: result = function_name(arguments)
u = round(98.851823)  # В этом случае округляется до первой цифры (до int)
print(u)
v = sorted([4, 7, 2])  # Sorts a list from low to high
print(v)
w = sorted(j[1][:-1], reverse=True)  # reverse - keyword arg (optional)
print(w)
print()
x = 'hello'
print(x.capitalize())  # ето метод. В данном случае, capitalize first letter
print(x.upper())  # Все заглавные (uppercase)
y = 'TI_PIDOR'
print(y.lower())  # Все мелкие (lowercase)
print(x.count('o'))  # Сколько штук (символов) в строке
z = [79, 69, 89, 47]
print(z.index(69))  # Возвращает индекс значения из листа
print(z.append(5))  # Добавляет элемент к листу
print()
print('--------NumPy--------')
aa = [180, 215, 210, 210, 188, 176, 209, 200]  # Берем лист
import numpy as np  # Импортим пакет NumPy как np (но ваще-т лучше сверху кода)
np_aa = np.array(aa)  # Вызываем метод, делающий из листа массив (array)
print(np_aa)  # Выводим это дело на экран
print(np_aa / 2)  # С массивами можно делать арифметические операции
ab = np.array(aa)
print(np_aa - ab)  # И между массивами тоже
print(ab, ab > 200)  # Можно сравнивать элементы массива, получая булево выражение
print(np.array([True, 1, 2]) + np.array([3, 4, False]))  # Можно даже так!
ad = np.array([[1, 1, 1],
             [2, 2, 2],
             [3, 3, 3]])
print(ad)
print(list(ad))  # Конвертация массивов в листы
ae = np.array([1, 2, 7, 4, 5])
print(np.mean(ae))  # Расшарить Average
print(np.median(ae))  # Расшарить Median
print(np.std(ae))  # Расшарить Standard Deviation
print(np.corrcoef(ae))  # Расшарить Standard Deviation

#---------------------------СВОИ ТРАИ---------------------------------
# anew = ‘word’[::-1]  # Расшарить, как это и что это
print(anew)
